library(ggplot2)
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA", "HLdeg"))
#Creating first random sample of 250, named "samp1"
set.seed(44)
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA")]
summary(samp1)
library(dplyr)
library(tidyr)
library(ggplot2)
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA"))
summary(usesamp1)
count(usesamp1)
#Figure out how to get another sample of 250 that only includes people not in this one to compare
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
#library('Amelia')
require('Amelia')
summary(usesamp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
imp1
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
#library('Amelia')
require('Amelia')
summary(usesamp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046 + q0005 + q0008 + q0010 + q0012 + q0013 + q0034 + q0036 + q0042,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
imp1
ggplot(imp1$imputations[[4]]$q0002)
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
hist(imp1$imputations[[4]]$q0003, col="grey", border="white")
hist(imp1$imputations[[4]]$q0046, col="grey", border="white")
ggplot(data=AFdata, aes(x=BEPTA)) + geom_hist()
ggplot(data=AFdata, aes(x=BEPTA)) + geom_histogram()
ggplot(data=AFdata, aes(x=HLdeg)) + geom_histogram()
ggplot(data=AFdata, aes(x=HLdeg)) + geom_boxplot()
ggplot(data=AFdata, aes(x=HLdeg)) + geom_histogram()
ggplot(data=AFdata, aes(x=HLdeg)) + geom_histogram(stat=count)
ggplot(data=AFdata, aes(x=HLdeg, stat=count)) + geom_histogram()
ggplot(data=AFdata, aes(x=HLdeg)) + geom_bar()
ggplot(data=AFdata, aes(x=BEPTA)) + geom_histogram()
ggplot(data=tempsamp1, aes(x=BEPTA)) + geom_histogram()
#Creating first random sample of 250, named "samp1"
set.seed(44)
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA")]
summary(samp1)
library(dplyr)
library(tidyr)
library(ggplot2)
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA"))
summary(usesamp1)
count(usesamp1)
ggplot(data=tempsamp1, aes(x=BEPTA)) + geom_histogram()
ggplot(data=usesamp1, aes(x=BEPTA)) + geom_histogram()
ggplot(data=usesamp1, aes(x=BEPTA)) + geom_histogram()
usesamp1<- drop_na(samp1, c("BEPTA", "HLdeg"))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA", "HLdeg")]
usesamp1<- drop_na(samp1, c("BEPTA", "HLdeg"))
ggplot(data=usesamp1, aes(x=HLdeg)) + geom_bar()
ggplot(data=tempsamp1, aes(x=HLdeg)) + geom_bar()
ggplot(data=temp_samp1, aes(x=HLdeg)) + geom_bar()
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA")]
ggplot(data=temp_samp1, aes(x=HLdeg)) + geom_bar()
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
ggplot(data=temp_samp1, aes(x=HLdeg)) + geom_bar()
ggplot(data=usesamp1, aes(x=BEPTA)) + geom_histogram()
stigdata <- read.csv("~/Desktop/Danyi/AF_USA_StigmaCoded_3.9.18.csv", header=T)
stigdata <- read.csv("~/Desktop/Danyi/AF_USA_StigmaCoded_3.9.18.csv", header=TRUE)
View(stigdata)
stigdata <- read.csv("~/Desktop/Danyi/AF_USA_StigmaCoded_3.9.18.csv")
View(stigdata)
stigdata <- read.csv("~/Desktop/Danyi/AF_USA_StigmaCoded_3.9.18.csv", header=TRUE)
View(stigdata)
view(stigdata)
summary(stigdata)
library(lavaan)
?package
library(lavaan)
summary(stigdata)
stigmodel1<- '
stigma=~ Stig_convo + Stig_HA + Stig_old _Stig_glasses + Stig_cane + Stig_whch'
fit1<- cfa(stgmodel1, data=stigdata, std.lv=TRUE)
fit1<- cfa(stigmodel1, data=stigdata, std.lv=TRUE)
summary(fit1, fit.measures=T, standardized=T)
stigmodel1<- '
stigma=~ Stig_convo + Stig_HA + Stig_old + _Stig_glasses + Stig_cane + Stig_whch'
fit1<- cfa(stigmodel1, data=stigdata, std.lv=TRUE)
stigmodel1<- '
stigma=~ Stig_convo + Stig_HA + Stig_old + Stig_glasses + Stig_cane + Stig_whch'
fit1<- cfa(stigmodel1, data=stigdata, std.lv=TRUE)
summary(fit1, fit.measures=T, standardized=T)
stigmodel2<- '
stigma=~ Stig_convo + Stig_HA + Stig_old + Stig_glasses + Stig_cane + Stig_whch
Stig_cane~~Stig_whch'
fit2<- cfa(stigmodel2, data=stigdata, std.lv=TRUE)
summary(fit2, fit.measures=T, standardized=T)
summary(fit1, fit.measures=T, standardized=T)
summary(fit3, fit.measures=T, standardized=T)
summary(fit3, fit.measures=T, standardized=T)
stigmodel3<- '
stigma=~ Stig_convo + Stig_HA + Stig_old +  Stig_cane + Stig_whch
Stig_cane~~Stig_whch'
fit3<- cfa(stigmodel3, data=stigdata, std.lv=TRUE)
summary(fit3, fit.measures=T, standardized=T)
stigmodel2<- '
stigma=~ Stig_convo + Stig_HA + Stig_old + Stig_glasses + Stig_cane + Stig_whch
Stig_cane~~Stig_whch'
fit2<- cfa(stigmodel2, data=stigdata, std.lv=TRUE)
summary(fit2, fit.measures=T, standardized=T)
stigdata <- read.csv("~/Desktop/Danyi/AF_USA_StigmaCoded_3.9.18.csv", header=TRUE)
View(stigdata)
summary(stigdata)
library("dplyr")
#Creating first random sample of 250, named "samp1"
set.seed(44)
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA", "HLdeg")]
summary(samp1)
library("dplyr")
library("ggplot2")
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA"))
library("tidyr")
#Creating first random sample of 250, named "samp1"
set.seed(44)
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA", "HLdeg")]
summary(samp1)
library("dplyr")
library("tidyr")
library("ggplot2")
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA"))
summary(usesamp1)
ggplot(data=tempsamp1, aes(x=BEPTA)) + geom_histogram()
ggplot(data=temp_samp1, aes(x=BEPTA)) + geom_histogram()
ggplot(data=usesamp1, aes(x=BEPTA)) + geom_histogram()
#ASHA Standards: (0)Normal: -10-25; (1)Mild: 26-40; (2)Moderate: 41-55; (3)Moderately-Severe: 56-70; (4)Severe: 71-90; (5)Profound: >90
AFdata$HLdeg <- cut(AFdata$BEPTA,
breaks=c(-Inf, 25, 40, 55, 70, 90, Inf),
labels=c("0", "1", "2", "3", "4", "5"))
ggplot(data=AFdata, aes(x=HLdeg)) + geom_bar()
ggplot(data=AFdata, aes(x=q0046, y=HLdeg)) + geom_boxplot
ggplot(data=AFdata, aes(x=q0046, y=HLdeg)) + geom_boxplot()
ggplot(data=AFdata, aes(x=q0046, y=HLdeg)) + geom_bar()
ggplot(data=AFdata, aes(x=q0046, y=BEPTA)) + geom_boxplot()
ggplot(data=AFdata, aes(x=q0046, y=BEPTA)) + geom_boxplot(group=q0046)
ggplot(data=AFdata, aes(x=q0046, y=BEPTA)) + geom_boxplot()
ggplot(data=AFdata, aes(x=q0046, y=BEPTA)) + geom_boxplot(aes(group=q0046))
#ASHA Standards: (0)Normal: -10-25; (1)Mild: 26-40; (2)Moderate: 41-55; (3)Moderately-Severe: 56-70; (4)Severe: 71-90; (5)Profound: >90
AFdata$HLdeg <- cut(AFdata$BEPTA,
breaks=c(-Inf, 25, 40, 55, 70, 90, Inf),
labels=c("0", "1", "2", "3", "4", "5"))
ggplot(data=AFdata, aes(x=HLdeg)) + geom_bar()
ggplot(data=AFdata, aes(x=q0046, y=BEPTA)) + geom_boxplot(aes(group=q0046)) + labs(title="Hearing loss by pathway", x="q0046", y="PTA in Better Hearing Ear")
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
#library('Amelia')
require('Amelia')
data(samp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = samp1))
count(usesamp1)summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
#library('Amelia')
require('Amelia')
data(samp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = samp1))
count(usesamp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
imp1
ggplot(imp1$imputations[[4]]$q0002)
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
ggplot(imp1$imputations[[4]]$q0002)
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
hist(imp1$imputations[[4]]$q0003, col="grey", border="white")
imp1
summary(samp1)
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
#library('Amelia')
require('Amelia')
data(samp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = samp1))
count(usesamp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
imp1
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
#Creating first random sample of 250, named "samp1"
set.seed(44)
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA")]
summary(samp1)
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA"))
summary(usesamp1)
ggplot(data=usesamp1, aes(x=BEPTA)) + geom_histogram()
ggplot(data=temp_samp1, aes(x=HLdeg)) + geom_bar()
require('Amelia')
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = samp1))
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = usesamp1))
summary(lm(BEPTA ~ q0002 + q0003 + q0014 + q0032 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
imp1
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
hist(imp1$imputations[[4]]$q0003, col="grey", border="white")
hist(imp1$imputations[[4]]$q0046, col="grey", border="white")
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
imp1
summary(imp1)
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
#library('Amelia')
require('Amelia')
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
summary(imp1)
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
hist(imp1$imputations[[4]]$q0003, col="grey", border="white")
hist(imp1$imputations[[4]]$q0046, col="grey", border="white")
imp1<- amelia(usesamp1, m=10, cs= "q0046")
summary(imp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
summary(imp1)
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp2<- amelia(usesamp1, m=15, cs= "q0046")
summary(imp2)
table(imp2$imputations[[14]]$q0046)
table(imp2$imputations[[14]]$q0042)
imp2<- amelia(usesamp1, m=15, cs= "q0046", noms = c("q0003", "q0008", "q0010", "q0014"))
imp2<- amelia(usesamp1, m=15, cs= "q0046", noms ="q0003", "q0008", "q0010", "q0014")
imp2<- amelia(usesamp1, m=5, cs= "q0046", noms = c("q0003", "q0008", "q0010", "q0014")
summary(imp2)
imp2<- amelia(usesamp1, m=5, cs= "q0046", noms = c("q0003", "q0008", "q0010", "q0014"))
summary(imp2)
table(imp2$imputations[[14]]$q0042)
table(imp2$imputations[[5]]$q0042)
table(imp2$imputations[[5]]$q0003)
dissdata<- read.csv("~/Desktop/Dissertation/Analyses (Post-Prospectus)/DissData_coded_2.20.18.csv", header=T)
Vies(dissdata)
View(dissdata)
dissdata<- read.csv("~/Desktop/Dissertation/Analyses (Post-Prospectus)/DissData_coded_3.5.18.csv", header=T)
View(dissdata)
library("lavaan")
library("ggplot2")
medprof.finalmodel<- '
trust=~TRUSTMET5_0001 + TRUSTMET5_0002 + TRUSTMET5_0006 + TRUSTMET5_0009 + TRUSTMET3_0002  + TRUSTMET6_0006 + TRUSTMET7_0002
TRUSTMET5_0001 ~~ TRUSTMET5_0006
TRUSTMET5_0001 ~~ TRUSTMET5_0002
TRUSTMET5_0006 ~~ TRUSTMET5_0002
TRUSTMET5_0001 ~~ TRUSTMET3_0002'
medprof.fit3<- cfa(medprof.finalmodel, data=dissdata,
std.lv=TRUE)
#medprof.fit3
summary(medprof.finalmodel, fit.measures=TRUE, standardized=TRUE)
summary(medprof.finalmodel, fit.measures=TRUE, standardized=TRUE)
medprof.finalmodel<- '
trust=~TRUSTMET5_0001 + TRUSTMET5_0002 + TRUSTMET5_0006 + TRUSTMET5_0009 + TRUSTMET3_0002  + TRUSTMET6_0006 + TRUSTMET7_0002
TRUSTMET5_0001 ~~ TRUSTMET5_0006
TRUSTMET5_0001 ~~ TRUSTMET5_0002
TRUSTMET5_0006 ~~ TRUSTMET5_0002
TRUSTMET5_0001 ~~ TRUSTMET3_0002'
medprof.finalfit<- cfa(medprof.finalmodel, data=dissdata,
std.lv=TRUE)
#medprof.finalfit
summary(medprof.finalfit, fit.measures=TRUE, standardized=TRUE)
nonmed.finalmodel<-
'trust=~ TRUSTMET3_0009 + TRUSTMET3_0011 + TRUSTMET4_0005 + TRUSTMET4_0004 + TRUSTMET6_0004 + TRUSTMET6_0010
TRUSTMET3_0009 ~~ TRUSTMET3_0011
TRUSTMET3_0011 ~~ TRUSTMET6_0004
TRUSTMET6_0004 ~~ TRUSTMET6_0010
TRUSTMET4_0004 ~~ TRUSTMET4_0005'
nonmed.finalfit<- cfa(nonmed.finalmodel, data=semproj,
std.lv=TRUE)
nonmed.finalmodel<-
'trust=~ TRUSTMET3_0009 + TRUSTMET3_0011 + TRUSTMET4_0005 + TRUSTMET4_0004 + TRUSTMET6_0004 + TRUSTMET6_0010
TRUSTMET3_0009 ~~ TRUSTMET3_0011
TRUSTMET3_0011 ~~ TRUSTMET6_0004
TRUSTMET6_0004 ~~ TRUSTMET6_0010
TRUSTMET4_0004 ~~ TRUSTMET4_0005'
nonmed.finalfit<- cfa(nonmed.finalmodel, data=dissdata,
std.lv=TRUE)
summary(nonmed.finalfit, fit.measures=TRUE, standardized=TRUE)
summary(dissdata)
summary(dissdata)
ggplot(data=dissdata, aes(x="GROUP", y="HCP_TRUST2")) + geom_bar()
ggplot(data=dissdata, aes(x="GROUP", y="HCP_TRUST2")) + geom_line()
ggplot(data=dissdata, aes(x="GROUP", y="HCP_TRUST2")) + geom_boxplot(group=aes(GROUP))
ggplot(data=dissdata, aes(x="GROUP", y="HCP_TRUST2")) + geom_bar(stat=identity)
ggplot(data=dissdata, aes(x="GROUP", y="HCP_TRUST2")) + geom_bar(stat = "identity")
ggplot(data=dissdata, aes(x=GROUP, y=HCP_TRUST2)) + geom_bar(stat = "identity")
dissdata$HCP_TRUST2
ggplot(data=dissdata, aes(x=GROUP, y=HCP_TRUST2)) + geom_bar(stat = "identity")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2)) + geom_bar(stat = "identity")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2)) + geom_boxplot()
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP)) + geom_boxplot()
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment)", y="Total Trust Score")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP), color=group.col) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, color=group.col)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, color=group.col)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, red, green)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, colours=group.col)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, colours=group.col)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, colours=c("red", "green"))) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
#summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
table(dissdata$AGE)
summary(dissdata$ID)
count.fields(dissdata$ID)
total(dissdata$ID)
sum(dissdata$ID)
dissdata$ID
dissdata$GROUP
summary(dissdata$GROUP)
table(dissdata$AGE)
"60.64"<- 53/325
53/325
"60.64"
"60-64"<- (53/325)*100
(53/325)*100
53+100+51+55+35
"60-64"<- (53/294)*100
"65-69"<-(100/294)*100
"70-74"<- (81/294)*100
"75-79"<-(55/294)*100
"80+"<-(35/294)*100
data.frame("60-64","65-69", "70-74", "75-79", "80+")
A<- (53/294)*100
B<-(100/294)*100
C<- (81/294)*100
D<-(55/294)*100
E<-(35/294)*100
data.frame(A,B,C,D,E)
#summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, colours=group.col)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
dissdata<- read.csv("~/Desktop/Dissertation/Analyses (Post-Prospectus)/DissData_coded_3.5.18.csv", header=T)
#View(dissdata)
summary(dissdata)
library("lavaan")
library("ggplot2")
#summary(dissdata)
group.col<- ifelse(dissdata$GROUP==0, "red", "green")
ggplot(data=dissdata, aes(GROUP, HCP_TRUST2, group=GROUP, colours=group.col)) + geom_boxplot() + labs(title="Total Trust Score by Group", x="Group (0=Non-treatment; 1=Treatment)", y="Total Trust Score")
table(dissdata$GENDER)
159+165
Male<- (159/324)*100
(159/324)*100
#data import.
AFdata<- read.csv("~/Desktop/Modeling Literature/AF_US_UNI_AllSubsSurvey+Audio_2.20.18.csv", header=T, na.strings="#NULL!")
#head(AFdata)
#View(AFdata)
library("dplyr")
library("tidyr")
library("ggplot2")
#data import.
AFdata<- read.csv("~/Desktop/Modeling Literature/AF_US_UNI_AllSubsSurvey+Audio_2.20.18.csv", header=T, na.strings="#NULL!")
#head(AFdata)
#View(AFdata)
library("dplyr")
library("tidyr")
library("ggplot2")
#issue with 90NR --> 95 change: the HHT doesn't measure other thresholds if 90NR at 1000Hz (first threshold tested). Should we set all thresholds to 95 or leave them missing? ---> SOLUTION: SET ALL >90 to 95
#Changing 90NR (aka 9999) and Conventional audio thresholds that are > 90 to 95
#Left Ear
AFdata$L5<-AFdata$L500
AFdata$L5[AFdata$L500 > 90] <- 95
AFdata$L1<-AFdata$L1000
AFdata$L1[AFdata$L1000 > 90] <- 95
AFdata$L2<-AFdata$L2000
AFdata$L2[AFdata$L2000 > 90] <- 95
AFdata$L4<-AFdata$L4000
AFdata$L4[AFdata$L4000 > 90] <- 95
#Right Ear
AFdata$R5<-AFdata$R500
AFdata$R5[AFdata$R500 > 90] <- 95
AFdata$R1<-AFdata$R1000
AFdata$R1[AFdata$R1000 > 90] <- 95
AFdata$R2<-AFdata$R2000
AFdata$R2[AFdata$R2000 > 90] <- 95
AFdata$R4<-AFdata$R4000
AFdata$R4[AFdata$R4000 > 90] <- 95
#At 8000Hz
AFdata$L8<-AFdata$L8000
AFdata$L8[AFdata$L8000 > 90] <- 95
AFdata$R8<-AFdata$R8000
AFdata$R8[AFdata$R8000 > 90] <- 95
#colnames(AFdata)[1000:1020]
#Moving forward, use "L5" --> "R8" instead of "L500"--> "R8000" because the new variables have the 95dB cutoff and 90NR replacements.
# Calculating PTA in each ear
#colnames(AFdata[,1000:1021])
AFdata$LPTA <- apply(AFdata[,1011:1014], 1, mean, na.rm=T)
AFdata$RPTA <- apply(AFdata[,1015:1018], 1, mean, na.rm=T)
AFdata$LPTA[is.nan(AFdata$LPTA)]  <- NA
AFdata$RPTA[is.nan(AFdata$RPTA)]  <- NA
#Now can calculate BEPTA (PTA in better ear)
AFdata$BEPTA<- ifelse((!is.na(AFdata$RPTA) & AFdata$RPTA <= AFdata$LPTA) | is.na(AFdata$LPTA),
AFdata$RPTA, AFdata$LPTA)
#To Check
#AFdata[c(1,2,257),c("RPTA", "LPTA", "BEPTA")]
#is.na(AFdata$BEPTA)
#AFdata[which(is.na(AFdata$RPTA)), c("RPTA", "LPTA", "BEPTA")]
#ASHA Standards: (0)Normal: -10-25; (1)Mild: 26-40; (2)Moderate: 41-55; (3)Moderately-Severe: 56-70; (4)Severe: 71-90; (5)Profound: >90
AFdata$HLdeg <- cut(AFdata$BEPTA,
breaks=c(-Inf, 25, 40, 55, 70, 90, Inf),
labels=c("0", "1", "2", "3", "4", "5"))
ggplot(data=AFdata, aes(x=HLdeg)) + geom_bar()
ggplot(data=AFdata, aes(x=q0046, y=BEPTA)) + geom_boxplot(aes(group=q0046)) + labs(title="Hearing loss by pathway", x="q0046", y="PTA in Better Hearing Ear")
#Creating first random sample of 250, named "samp1"
set.seed(44)
temp_samp1<- na.omit(sample(1:nrow(AFdata), 250))
samp1<-AFdata[temp_samp1, c("q0002", "q0003", "q0005", "q0008", "q0010", "q0012", "q0013", "q0014", "q0032", "q0034", "q0036", "q0042", "q0046", "BEPTA")]
summary(samp1)
#Omitting missing PTA and degree of hearing loss variables
usesamp1<- drop_na(samp1, c("BEPTA"))
summary(usesamp1)
ggplot(data=usesamp1, aes(x=BEPTA)) + geom_histogram()
#ggplot(data=temp_samp1, aes(x=HLdeg)) + geom_bar()
#Figure out how to get another sample of 250 that only includes people not in this one to compare
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
library('Amelia')
require('Amelia')
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
summary(imp1)
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
hist(imp1$imputations[[4]]$q0003, col="grey", border="white")
hist(imp1$imputations[[4]]$q0046, col="grey", border="white")
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp2<- amelia(usesamp1, m=5, cs= "q0046", noms = c("q0014"))
summary(imp2)
table(imp2$imputations[[5]]$q0003)
plot(imp2, which.vars= 1:13)
#Installing Amelia package for MI.
#Cite as James Honaker, Gary King, Matthew Blackwell (2011). Amelia II: A Program for Missing Data. Journal of Statistical Software, 45(7), 1-47. URL http://www.jstatsoft.org/v45/i07/.
#install.packages("Amelia")
#update.packages("Amelia")
library('Amelia')
require('Amelia')
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp1<- amelia(usesamp1, m=5, cs= "q0046")
summary(imp1)
hist(imp1$imputations[[4]]$q0002, col="grey", border="white")
hist(imp1$imputations[[4]]$q0003, col="grey", border="white")
hist(imp1$imputations[[4]]$q0046, col="grey", border="white")
summary(lm(BEPTA ~ q0002 + q0003 + q0005 + q0008 + q0010 + q0012 + q0013 + q0014 + q0032 + q0034 + q0036 + q0042 + q0046,
data = usesamp1))
imp2<- amelia(usesamp1, m=5, cs= "q0046", noms = c("q0014"))
summary(imp2)
plot(imp2, which.vars= 1:13)
plot(imp2, which.vars= "q0002":"q0046")
plot(imp2, which.vars= q0002:q0046)
summary(imp2)
plot(imp2, which.vars= 1:14)
plot(imp2, which.vars= 1:5)
plot(imp2, which.vars= 1:12)
